
Parameters:
  S3ResourceBucket:
    Type: String
    Description: S3 bucket that contains lambda deployment packages and other data

  S3PublicBucket:
    Type: String
    Description: s3 website-enabled bucket (this will be created - must be unique)

  NotificationEmailAddress:
    Type: String
    Description: upload notifications are sent to this address (via SNS)

Resources:

  LambdaS3PresignGlobalRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              -
                Effect: "Allow"
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  !Join [ "", [ "arn:aws:s3:::", !Ref S3PublicBucket, "/*"  ] ]
              -
                Effect: "Allow"
                Action:
                  - sns:Publish
                Resource:
                  !Join [ "", [ "arn:aws:sns:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !GetAtt SNSTopic.TopicName ] ]


  LambdageneratePresignPOST:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ResourceBucket
        S3Key: apps/aws-s3-uploader-tool/generatePresignPOST.zip
      Description: generates presigned url
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", generatePresignPOST ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaS3PresignGlobalRole.Arn
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          s3_bucket: !Ref S3PublicBucket

  LambdaProcessUpload:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3ResourceBucket
        S3Key: apps/aws-s3-uploader-tool/processUpload.zip
      Description: triggered when file is POSTed to url
      FunctionName:
        !Join [ "_", [ !Ref "AWS::StackName", processUpload ] ]
      Handler: app.handler
      MemorySize: 128
      Role:
        !GetAtt LambdaS3PresignGlobalRole.Arn
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          s3_bucket: !Ref S3PublicBucket
          sns_arn: !Ref SNSTopic

  S3UploaderWebsiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName:
        !Ref S3PublicBucket
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          -
            AllowedMethods: [POST]
            AllowedOrigins: ['*']
            AllowedHeaders: ['*']
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Event: s3:ObjectCreated:Post
            Function: !GetAtt LambdaProcessUpload.Arn
            Filter:
              S3Key:
                Rules:
                  -
                    Name: prefix
                    Value: uploads/


  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        !GetAtt LambdaProcessUpload.Arn
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"


  S3UploaderWebsitePolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3UploaderWebsiteBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:GetObject
            Effect: "Allow"
            Resource:
              !Join [ "", [ "arn:aws:s3:::", !Ref S3PublicBucket, "/public/*"  ] ]
            Principal: "*"

  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName:
        !Join [ "_", [ !Ref "AWS::StackName", _topic ] ]
      Subscription:
        -
          Endpoint: !Ref NotificationEmailAddress
          Protocol: email
